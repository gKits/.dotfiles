#!/bin/sh

low="yellow"
medium="orange"
high="orangered"
critical="red"

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "-h|--help             Print this usage message"
    echo "   --low COLOR        Specify a color for low events (default: yellow)"
    echo "   --medium COLOR     Specify a color for medium events (default: orange)"
    echo "   --high COLOR       Specify a color for high events (default: orangered)"
    echo "   --critical COLOR   Specify a color for critical events (default: red)"
}

has_argument() {
    [[ ("$1" == *=* && -n ${1#*=}) || ( ! -z "$2" && "$2" != -*)  ]];
}

extract_argument() {
    echo "${2:-${1#*=}}"
}

handle_options() {
    while [ $# -gt 0 ]; do 
        case $1 in
            -h|--help)
                usage
                exit 0
            ;;
            --low*)
                if ! has_argument $@; then
                    echo "color for low not specified" >&2
                    usage
                    exit 1
                fi
                low=$(extract_argument $@)
                shift
            ;;
            --medium*)
                if ! has_argument $@; then
                    echo "color for medium not specified" >&2
                    usage
                    exit 1
                fi
                medium=$(extract_argument $@)
                shift
            ;;
            --high*)
                if ! has_argument $@; then
                    echo "color for high not specified" >&2
                    usage
                    exit 1
                fi
                high=$(extract_argument $@)
                shift
            ;;
            --critical*)
                if ! has_argument $@; then
                    echo "color for critical not specified" >&2
                    usage
                    exit 1
                fi
                critical=$(extract_argument $@)
                shift
            ;;
            *)
                echo "invalid option: $1" >&2
                usage
                exit 1
            ;;
        esac
        shift
    done
}

music_player() {
    media_artist=$(playerctl metadata artist)
    media_song=$(playerctl metadata title)
    player_status=$(playerctl status)

    if [ "$player_status" = "Playing" ]; then
        song_status='▶'
    elif [ "$player_status" = "Paused" ]; then
        song_status='⏸'
    else
        song_status='⏹'
    fi

    if [ ${#media_song} -gt 25 ]; then
        media_song="${media_song:0:22}..."
    fi

    echo " $song_status $media_artist - $media_song"
}

network() {
    network=$(ip route get 1.1.1.1 | grep -Po '(?<=dev\s)\w+' | cut -f1 -d ' ')
    interface_easyname=$(dmesg | grep $network | grep renamed | awk 'NF>1{print $NF}')

    if ! [ $network ]; then
       network_active="⛔"
    else
       network_active="⇆"
    fi
    echo "$network_active $interface_easyname"
}

loadavg() {
    echo " $(cat /proc/loadavg | awk -F ' ' '{print $2}')"
}

volume() {
    audio_volume=$(pamixer --sink `pactl list sinks short | grep RUNNING | awk '{print $1}'` --get-volume)
    audio_is_muted=$(pamixer --sink `pactl list sinks short | grep RUNNING | awk '{print $1}'` --get-mute)

    if [ "$audio_volume" = "" ]; then
        audio_volume="0"
    fi

    if [ "$audio_is_muted" = "true" ]; then
        audio_active=''
    else
        audio_active=''
    fi

    echo "$audio_active $audio_volume%"
}

battery_charge() {
    battery_charge=$(upower --show-info $(upower --enumerate | grep 'BAT') | grep -E "percentage" | awk '{print $2}')
    battery_status=$(upower --show-info $(upower --enumerate | grep 'BAT') | grep -E "state" | awk '{print $2}')

    battery_charge_icons=( "󰂎" "󰁺" "󰁻" "󰁼" "󰁽" "󰁾" "󰁿" "󰂀" "󰂁" "󰂂" "󰁹" )
    colors=( "" $critical $high $medium $low )
    battery_charge_icon="󰂄"
    if [ $battery_status = "discharging" ]; then
        battery_charge_num=${battery_charge%\%}
        if [ battery_charge_num -ge 95 ]; then
            battery_charge_num=100
        fi
        idx=$(($battery_charge_num / 10))
        battery_charge_icon=${battery_charge_icons[idx]}
        color=${colors[idx + 1]}
    fi

    if [ -z $color ]; then
        echo "$battery_charge $battery_charge_icon"
    else
        echo "<span foreground='$color'>$battery_charge $battery_charge_icon</span>"
    fi
}

datetime() {
    echo " $(date '+%d %b') 󰥔 $(date '+%H:%M')"
}

handle_options "$@"
echo "$(music_player) | $(network) | $(loadavg) | $(volume) | $(battery_charge) | $(datetime)"
